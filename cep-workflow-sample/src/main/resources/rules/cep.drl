package com.sample.cep


import com.sample.cep.*;
import com.sample.process.*;

import gnu.io.CommPort;
import gnu.io.CommPortIdentifier;
import gnu.io.SerialPort;

import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;


declare ThermoSensorData
@role(event)
end

declare SmokeSensorData
@role(event)
end

declare DustSensorData
@role(event)
end

declare VibrationData
@role(event)
end

declare FingerPrintData
@role(event)
end

rule "test"
no-loop true
	lock-on-active true
	when
		ssd: SmokeSensorData(SmokeLevel > 1, value: SmokeLevel) from entry-point gas
	then
	    ssd.seta(10);
	    System.out.println(ssd.geta());
end

rule "High Dust Rule"
	no-loop true
	lock-on-active true
	when
		dsd: DustSensorData(dust > dsd.getDoubleLimit(), value: dust) from entry-point dust
	then
		Rxtx rx = new Rxtx();
		rx.a(123);
    	//out.write(dsd.eventValue());
end

rule "Low Dust Rule"
	no-loop true
	lock-on-active true
	when
		dsd: DustSensorData(dust <= dsd.getDoubleLimit(), value: dust) from entry-point dust
	then
		//this.out.write(dsd.eventCancelValue());
end
	
rule "High Smoke Rule"
	no-loop true
	lock-on-active true
	when
		ssd: SmokeSensorData(SmokeLevel > ssd.getDoubleLimit(), value: SmokeLevel) from entry-point gas
	then
		//this.out.write(gsd.eventValue());
end
		
rule "Low Smoke Rule"
	no-loop true
	lock-on-active true
	when
		ssd: SmokeSensorData(SmokeLevel <= ssd.getDoubleLimit(), value: SmokeLevel) from entry-point gas
	then
		//this.out.write(gsd.eventCancelValue());
end
		
rule "Earthquake Rule"
	no-loop true
	lock-on-active true
	when
		vsd: VibrationData(Vibration > vsd.getLongLimit(), value: Vibration) from entry-point vibration
	then
		//this.out.write(vsd.eventValue());
end
		
rule "Earthquake-end Rule"
	no-loop true
	lock-on-active true
	when
		vsd: VibrationData(Vibration <= vsd.getLongLimit(), value: Vibration) from entry-point vibration
	then
		//this.out.write(vsd.eventCancelValue());
end
